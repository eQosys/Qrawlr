#include "Grammar.h"
namespace qrawlr {
    Grammar Grammar::load_internal_grammar() {
        Grammar g;
        g.add_rule(std::make_shared<Rule>("Grammar", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("GrammarLine", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("GrammarLine", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("GrammarLine", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("RuleDefinition", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Comment", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Comment", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(10), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleDefinition", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("RuleHeader", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("RuleBody", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected rule body" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleHeader", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("RuleModifierList", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(":", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ':'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleBody", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("RuleOptionDefinition", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("RuleOptionDefinition", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleModifierList", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("(", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("RuleModifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected at least one rule modifier" } }) } }) } })), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("RuleModifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(")", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ')'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleModifier", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("hidden", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("fuse", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("collapse", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("RuleOptionDefinition", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("FullMatcher", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Matcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherModifiers", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherActions", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Matcher", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchAnyChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchAll", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchAny", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchRange", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchExact", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchRule", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatchStack", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchAnyChar", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>(".", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchExact", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("String", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchRule", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchAll", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("(", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(")", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ')'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchAny", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("[", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("FullMatcher", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("]", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ']'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchRange", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("'", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatchRangeChar", Flags<Matcher::Flags>::from_raw(0), 2, 2, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected exactly two characters" } }) } }) } })), std::make_shared<MatcherMatchExact>("'", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected '''" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchStack", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>(":", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected stack name" } }) } }) } })), std::make_shared<MatcherMatchExact>(".", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected '.'" } }) } }) } })), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected stack index" } }) } }) } })), std::make_shared<MatcherMatchExact>(":", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ':'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifiers", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatcherModifierInvert", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherModifierQuantifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherModifierLookAhead", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherModifierOmitMatch", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherModifierReplaceMatch", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifierQuantifier", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("?", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("*", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("+", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "QuantifierSymbolic" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("#", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("-", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected quantifier range maximum value" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "QuantifierRange" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("#", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "QuantifierExact" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("#>", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected lower bound value" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "QuantifierLowerBound" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("#<", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Integer", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected upper bound value" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "QuantifierUpperBound" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifierReplaceMatch", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("->", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("String", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatchStack", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected identifier, string or stack reference" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifierInvert", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("!", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifierLookAhead", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("~", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherModifierOmitMatch", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("_", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherActions", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("{", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatcherTrigger", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(",", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherTrigger", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("}", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected '}'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherTrigger", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(":", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ':'" } }) } }) } })), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherActionList", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected matcher action list" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherActionList", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("[", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatcherAction", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(",", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherAction", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected matcher action after ','" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("]", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ']'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatcherAction", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected matcher action" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherAction", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherActionArgumentList", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherActionArgumentList", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("(", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("MatcherActionArgument", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(",", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("MatcherActionArgument", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected matcher action argument after ','" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("WoNwoC", Flags<Matcher::Flags>::from_raw(0), 0, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>(")", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected ')'" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatcherActionArgument", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Identifier", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("String", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("_", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "MatchedText" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Identifier", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("AlphaChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("AlnumChar", Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Comment", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("\\\\", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(1), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Integer", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("0x", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("HexChar", Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected hexadecimal integer literal" } }) } }) } })), std::make_shared<MatcherMatchExact>("", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "FormatHex" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("0b", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("BinChar", Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected binary integer literal" } }) } }) } })), std::make_shared<MatcherMatchExact>("", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "FormatBin" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("0", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("OctChar", Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "FormatOct" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("DecChar", Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ MatchReplacement::Type::Identifier, "FormatDec" }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("String", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("\"", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("StringChar", Flags<Matcher::Flags>::from_raw(0), 0, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("\"", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected '" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("EscapeSequence", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("\\", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("a", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("b", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("e", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("f", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("n", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("r", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("t", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("v", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("\\", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("'", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("\"", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("\\", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("x", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("HexChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("HexChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>({ { "onFail", std::vector<Action>({ Action{ "fail", std::vector<Action::Arg>({ Action::Arg{ Action::ArgType::String, "Expected hexadecimal escape sequence" } }) } }) } })) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("MatchRangeChar", Flags<Rule::Flags>::from_raw(0), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("EscapeSequence", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchAnyChar>(Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("StringChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("EscapeSequence", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("\"", Flags<Matcher::Flags>::from_raw(1), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("AlphaChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRange>("a", "z", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRange>("A", "Z", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("HexChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRange>("0", "9", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRange>("a", "f", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRange>("A", "F", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("BinChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRange>("0", "1", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("OctChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRange>("0", "7", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("DecChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRange>("0", "9", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("AlnumChar", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("AlphaChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("DecChar", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Newline", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>("\n", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("Whitespace", Flags<Rule::Flags>::from_raw(2), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchExact>(" ", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchExact>("\t", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        g.add_rule(std::make_shared<Rule>("WoNwoC", Flags<Rule::Flags>::from_raw(1), std::vector<MatcherRef>({ std::make_shared<MatcherMatchAll>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchAny>(std::vector<MatcherRef>({ std::make_shared<MatcherMatchRule>("Whitespace", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Newline", Flags<Matcher::Flags>::from_raw(8), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()), std::make_shared<MatcherMatchRule>("Comment", Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, -1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()) }), Flags<Matcher::Flags>::from_raw(0), 1, 1, MatchReplacement{ }, std::map<std::string, std::vector<Action>>()));
        return g;
    }
}
